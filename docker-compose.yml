version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: autotrader-db
    environment:
      POSTGRES_DB: autotrader
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    networks:
      - autotrader-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d autotrader"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: autotrader-redis
    ports:
      - "6379:6379"
    networks:
      - autotrader-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # AutoTrader Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: autotrader-app
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/autotrader
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_SHOW_SQL: "false"
      SERVER_PORT: 8080
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - autotrader-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/cars/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: autotrader-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - autotrader-network

volumes:
  postgres_data:
    driver: local

networks:
  autotrader-network:
    driver: bridge